import { preprocess } from 'svelte/compiler';
import sveltePreprocess from 'svelte-preprocess';

const mode = process.env.NODE_ENV;
const dev = mode === 'development';
const options = {
	sourceMap: dev,
	scss: {
		prependData: `
			@import './node_modules/spectre.css/src/variables';
			@import './node_modules/spectre.css/src/mixins';
			@import './node_modules/spectre.css/src/icons/icons-core';
		`
	},
	postcss: true,
	typescript: true
};

/** @type {import('@sveltejs/kit').Config} */
const config = {
	// Consult https://github.com/sveltejs/svelte-preprocess
	// for more information about preprocessors
	preprocess: [
		{
			async markup({ content, filename }) {
				const preprocessed = await preprocess(content, [sveltePreprocess(options)], { filename });
				// console.dir(preprocessed)
				if (!dev) {
					const regexp = /lang="ts"|lang="scss"|(<script lang="ts" context="module"><\/script>)/g;
					const code = preprocessed.code.replaceAll(regexp, '');
					preprocessed.code = code.trim();
					// console.dir(preprocessed.code.replaceAll(/lang="ts"|lang="scss"/g, null))
					return preprocessed;
				} else return preprocessed;
			}
		}
	],

	kit: {
		// hydrate the <div id="svelte"> element in src/app.html
		target: '#svelte',
		package: {
			dir: 'package',
			exports: {
				include: ['**'],
				exclude: ['**/_*', 'str_to_rgb.ts']
			},
			files: {
				include: ['**'],
				exclude: ['helpers/str_to_rgb.ts', 'types/asset.ts', 'types/asyncable.ts']
			},
			emitTypes: true
		}
	}
};


export default config;
